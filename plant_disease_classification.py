# -*- coding: utf-8 -*-
"""plant disease classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcVfMR_wPXAUlG4o-guLe7BdkU1jAmxp
"""

!pip uninstall -y Pillow

!pip install Pillow==5.3.0

!pip install image
!pip3 install http://download.pytorch.org/whl/cu80/torch-0.4.0-cp36-cp36m-linux_x86_64.whl
!pip3 install torchvision
import PIL
print(PIL.PILLOW_VERSION)

import torch
import numpy as np
import matplotlib.pyplot as plt
import torch
import time
import numpy as np

from torch import nn, optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models
import torchvision
from collections import OrderedDict
from torch.autograd import Variable
from PIL import Image
from torch.optim import lr_scheduler
import copy
import json
import os
from os.path import exists

train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

from zipfile import ZipFile
file_name = "PlantVillage.zip"
with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('Done')

from google.colab import drive

drive.mount("/content/gdrive")

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
     from pydrive.drive import GoogleDrive
     from google.colab import auth
     from oauth2client.client import GoogleCredentials

auth.authenticate_user()
     gauth = GoogleAuth()
     gauth.credentials = GoogleCredentials.get_application_default()
     drive = GoogleDrive(gauth)

json_import = drive.CreateFile({'id':'1qI9zJ_jd_8MZkzY38e82gQ40ZMBLL-Mw'})

json_import.GetContentFile('PlantVillage.zip')

import json

data = json.load(open('PlantVillage.zip'))

from zipfile import  ZipFile
file_name="PlantVillage.zip"
with Zipfile(file_name,'r') as zip:
  zip.extractall()
  print('Done')

from zipfile import  ZipFile

file_name="PlantVillage.zip"
z=ZipFile(file_name)
print(z.namelist())



import numpy as np
import pickle
import cv2
from os import listdir
from sklearn.preprocessing import LabelBinarizer
from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation, Flatten, Dropout, Dense
from keras import backend as K
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.preprocessing import image
from keras.preprocessing.image import img_to_array
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt



image_list, label_list = [], []
try:
    print("[INFO] Loading images...")
    root_dir = listdir(directory_root)
    for directory in root_dir :
      if directory == ".DS_Store" :
        root_dir.remove(directory)
    
    for plant_folder in root_dir :
        plant_disease_folder_list = listdir(f"{directory_root}/{plant_folder}")

        for disease_folder in plant_disease_folder_list :
          if disease_folder == ".DS_Store" :
              plant_disease_folder_list.remove(disease_folder)

        for plant_disease_folder in plant_disease_folder_list:
          print(f"[INFO] Processing {plant_disease_folder_list}...")
          plant_disease_image_list = listdir(f"{directory_root}/{plant_folder}/{plant_disease_folder/}")

          for single_plant_disease_image in plant_disease_image_list :
            if single_plant_disease_image == ".DS_Store" :
                plant_disease_image_list.remove(single_plant_disease_image)
          
          for image in plant_disease_image_list[:200] :
            image_directory = f"{directory_root}/{plant_folder}/{plant_disease_folder}/{image}"

            if image_directory.endswith(".jpg")== True or image_directory.endswith(".JPG")== True:
                image_list.append(convert_image_to_array(image_directory))
                label_list.append(plant_disease_folder)
    print("[INFO] Image loading completed")
except Exception as e:
  print(f"Error : {e}")

def convert_image_to_array(file_name):
  try: 
    image=cv2.imread(file_name)
    if image is not None:
      image=cv2.resize(image,default_image_size)
      return img_to_array(image)
    else:
        return np.array([])
  except Exception as e:
    print(f"Error:{e}")
    return None

import os
list_of_imgs = []
img_dir = "/content/PlantVillage.zip"
for img in os.listdir("."):
    img = os.path.join(img_dir, img)
    if not img.endswith(".jpg"):
        continue
    a = cv2.imread(img)
    if a is None:
        print ("Unable to read image"), img
        continue
    list_of_imgs.append(a.flatten())
train_data = np.array(list_of_imgs)

print(train_data)

label_binarizer=LabelBinarizer()
image_labels = label_binarizer.fit_transform(label_list)
pickel.dump(label_binarizer, open('label_transform.pkl','wb'))
n_classes = len(label_binarizer.classes_)

